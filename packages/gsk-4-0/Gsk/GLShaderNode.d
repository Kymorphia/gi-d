module Gsk.GLShaderNode;

import GLib.Bytes;
import GObject.ObjectG;
import Gid.gid;
import Graphene.Rect;
import Gsk.GLShader;
import Gsk.RenderNode;
import Gsk.Types;
import Gsk.c.functions;
import Gsk.c.types;

/**
 * A render node using a GL shader when drawing its children nodes.
 */
class GLShaderNode : RenderNode
{

  this(void* ptr, bool ownedRef = false)
  {
    if (!ptr)
      throw new GidConstructException("Null instance pointer for Gsk.GLShaderNode");

    super(cast(GskRenderNode*)ptr, ownedRef);
  }

  /**
   * Creates a `GskRenderNode` that will render the given shader into the
   * area given by bounds.
   * The args is a block of data to use for uniform input, as per types and
   * offsets defined by the shader. Normally this is generated by
   * [Gsk.GLShader.formatArgs] or [Gsk.ShaderArgsBuilder].
   * See [Gsk.GLShader] for details about how the shader should be written.
   * All the children will be rendered into textures $(LPAREN)if they aren't already
   * `GskTextureNodes`, which will be used directly$(RPAREN). These textures will be
   * sent as input to the shader.
   * If the renderer doesn't support GL shaders, or if there is any problem
   * when compiling the shader, then the node will draw pink. You should use
   * [Gsk.GLShader.compile] to ensure the shader will work for the
   * renderer before using it.
   * Params:
   *   shader = the `GskGLShader`
   *   bounds = the rectangle to render the shader into
   *   args = Arguments for the uniforms
   *   children = array of child nodes,
   *     these will be rendered to textures and used as input.
   * Returns: A new `GskRenderNode`
   */
  this(GLShader shader, Rect bounds, Bytes args, RenderNode[] children)
  {
    GskRenderNode* _cretval;
    uint _nChildren;
    if (children)
      _nChildren = cast(uint)children.length;

    GskRenderNode*[] _tmpchildren;
    foreach (obj; children)
      _tmpchildren ~= obj ? cast(GskRenderNode*)obj.cPtr : null;
    GskRenderNode** _children = cast(GskRenderNode**)_tmpchildren.ptr;
    _cretval = gsk_gl_shader_node_new(shader ? cast(GskGLShader*)shader.cPtr(false) : null, bounds ? cast(graphene_rect_t*)bounds.cPtr(false) : null, args ? cast(GBytes*)args.cPtr(false) : null, _children, _nChildren);
    this(_cretval, true);
  }

  /**
   * Gets args for the node.
   * Returns: A `GBytes` with the uniform arguments
   */
  Bytes getArgs()
  {
    GBytes* _cretval;
    _cretval = gsk_gl_shader_node_get_args(cast(GskRenderNode*)cPtr);
    auto _retval = _cretval ? new Bytes(cast(void*)_cretval, false) : null;
    return _retval;
  }

  /**
   * Gets one of the children.
   * Params:
   *   idx = the position of the child to get
   * Returns: the idx'th child of node
   */
  RenderNode getChild(uint idx)
  {
    GskRenderNode* _cretval;
    _cretval = gsk_gl_shader_node_get_child(cast(GskRenderNode*)cPtr, idx);
    auto _retval = _cretval ? new RenderNode(cast(GskRenderNode*)_cretval, false) : null;
    return _retval;
  }

  /**
   * Returns the number of children
   * Returns: The number of children
   */
  uint getNChildren()
  {
    uint _retval;
    _retval = gsk_gl_shader_node_get_n_children(cast(GskRenderNode*)cPtr);
    return _retval;
  }

  /**
   * Gets shader code for the node.
   * Returns: the `GskGLShader` shader
   */
  GLShader getShader()
  {
    GskGLShader* _cretval;
    _cretval = gsk_gl_shader_node_get_shader(cast(GskRenderNode*)cPtr);
    auto _retval = _cretval ? ObjectG.getDObject!GLShader(cast(GskGLShader*)_cretval, false) : null;
    return _retval;
  }
}
